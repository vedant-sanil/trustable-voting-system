diff --git a/API/VotingServer.md b/API/VotingServer.md
index 6bc36ac..dd1d0de 100644
--- a/API/VotingServer.md
+++ b/API/VotingServer.md
@@ -2,7 +2,7 @@
 
 ## Overview
 
-This API specifies all types of messages that a server node shall handle in addition to the messages that a regular blockchain node handles.
+This API specifies all types of messages that a server node shall handle.
 
 
 The types of messages include the following.
@@ -204,7 +204,42 @@ To put it simply:
 
 `encrypted_vote_contents` ("xxx" in the json object structure given above): The encrypted vote cast by the voter. This encryption was performed using the session key generated by the client.
 
+You are allowed to follow one of the following two methods to create `encrypted_vote_contents`:
 
+----
+
+***Method 1 (Authentication using digital signatures):***
+
+Contents of `encrypted_vote_contents`:
+
+```json
+{
+    "chain_id": 2,
+    "user_name": "voter_1",
+    "voted_for": "candidate_1",
+    "signature": "zzz"
+} EncryptedBy(AES_Session_Key)
+```
+
+`chain_id`: The chain to which the vote is to be added. This field always corresponds to the voting blockchain (Id: 2)
+
+`user_name`: The username of the voter casting the vote.
+
+`voted_for`: The candidate for whom the vote is being cast.
+
+`signature` ("zzz" in the json object structure given above): This field is an encrypted hash of the "chain_id", "user_name" and "voted_for" fields. Some popular digital signature schemes included (but not limited to) SHA1withRSA, MD5withDSA etc.
+
+***Note:***
+- On the client's side, before sending the vote to the server, the signature is created using the private key of the voter.
+- On the server's side, the signature is verified using the public key of the voter.
+
+***Important:***  If you choose to follow this method of authentication, you must ensure that:
+- When the server receives the vote, it recalculates and verifies the digital signature hash using the "chain_id", "user_name" and "voted_for" fields. The server must add the vote to the voting blockchain only if the signature is verified correctly. This check ensures the authenticity, integrity and non-repudiation of the message.
+----
+
+----
+
+***Method 2 (Authentication by performing encryption using voter's private key):***
 
 
 Contents of `encrypted_vote_contents`:
@@ -217,6 +252,10 @@ Contents of `encrypted_vote_contents`:
 } EncryptedBy(AES_Session_Key)
 ```
 
+`chain_id`: The chain to which the vote is to be added. This field always corresponds to the voting blockchain (Id: 2)
+
+`user_name`: The username of the voter casting the vote.
+
 Contents of `encrypted_vote` ("zzz" in the json object structure given above):
 
 ```json
@@ -226,7 +265,14 @@ Contents of `encrypted_vote` ("zzz" in the json object structure given above):
 } EncryptedBy(V_Priv_key)
 ```
 
-where
+`user_name`: The username of the voter casting the vote.
+
+`voted_for`: The candidate for whom the vote is being cast.
+
+----
+
+
+Glossary for the above section:
 
 `S_Pub_Key`: Server's public key
 
